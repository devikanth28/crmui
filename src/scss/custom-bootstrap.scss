@use "sass:map";
@import '../../node_modules/bootstrap/scss/mixins';
@import '../../node_modules/bootstrap/scss/functions';
@import '../../node_modules/bootstrap/scss/variables';
@import 'custom-variables';

$custom-theme-colors: (
    'brand' : $brand,
    'dark'  : $black,
    'primary'  : $blue,
    'success': $green-900,
    'warning': $warning
) !default;

$theme-colors : map.merge($theme-colors , $custom-theme-colors);

@each $color, $value in $theme-colors {
    .btn-#{$color} {
      @if $color == "light" {
        @include button-variant(
          $value,
          $value,
          $hover-background: shade-color($value, $btn-hover-bg-shade-amount),
          $hover-border: shade-color($value, $btn-hover-border-shade-amount),
          $active-background: shade-color($value, $btn-active-bg-shade-amount),
          $active-border: shade-color($value, $btn-active-border-shade-amount)
        );
      } @else if $color == "dark" {
        @include button-variant(
          $value,
          $value,
          $hover-background: tint-color($value, $btn-hover-bg-tint-amount),
          $hover-border: tint-color($value, $btn-hover-border-tint-amount),
          $active-background: tint-color($value, $btn-active-bg-tint-amount),
          $active-border: tint-color($value, $btn-active-border-tint-amount)
        );
      } @else {
        @include button-variant($value, $value);
      }
    }
}

.btn-link{
    $link-decoration: none;
    text-decoration: $link-decoration;

    &:hover,
    &:focus-visible {
        background: $gray-50
    }
}

@each $color, $value in $theme-colors {
    .btn-outline-#{$color} {
      @include button-outline-variant($value);
    }
}

@each $state, $value in $theme-colors {
    $alert-background: shift-color($value, $alert-bg-scale-custom);
    $alert-border: shift-color($value, $alert-border-scale-custom);
    $alert-color: shift-color($value, $alert-color-scale-custom);
  
    @if (contrast-ratio($alert-background, $alert-color) < $min-contrast-ratio) {
      $alert-color: mix($value, color-contrast($alert-background), abs($alert-color-scale-custom));
    }
    .alert-#{$state} {
      @include alert-variant($alert-background, $alert-border, $alert-color);
    }
}

@each $color, $value in $theme-colors {
    .link-#{$color} {
      color: $value !important; // stylelint-disable-line declaration-no-important
  
      @if $link-shade-percentage != 0 {
        &:hover,
        &:focus {
          color: if(color-contrast($value) == $color-contrast-light, shade-color($value, $link-shade-percentage), tint-color($value, $link-shade-percentage)) !important; // stylelint-disable-line declaration-no-important
        }
      }
    }
}

.text-primary {
    --bs-text-opacity: 1;
    --bs-primary-rgb:28, 63, 253;
    color: rgba(var(--bs-primary-rgb), var(--bs-text-opacity)) !important;
}

.text-success {
    --bs-text-opacity: 1;
    --bs-success-rgb:17, 176,148;
    color: rgba(var(--bs-success-rgb), var(--bs-text-opacity)) !important;
}

.text-warning {
    --bs-text-opacity: 1;
    --bs-warning-rgb:248, 132, 65;
    color: rgba(var(--bs-warning-rgb), var(--bs-text-opacity)) !important;
}

.text-brand {
    --bs-text-opacity: 1;
    --bs-brand-rgb:231,28,55;
    color: rgba(var(--bs-brand-rgb), var(--bs-text-opacity)) !important;
}

.text-light {
    --bs-text-opacity: 1;
    --bs-light-rgb: 206, 212,218;
    color: rgba(var(--bs-light-rgb), var(--bs-text-opacity)) !important;
  }
